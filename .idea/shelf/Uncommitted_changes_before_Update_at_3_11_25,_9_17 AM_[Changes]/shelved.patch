Index: src/main/java/com/kibo/pgar/lib/SimpleInput.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.kibo.pgar.lib;\n\nimport java.util.*;\n\n/*\n* @author Mattia Tognela\n*\n* Is a little class for delivering input functionality to the dev.\n*\n* Was created for let me input stuff with easy in my Java project.\n */\n\npublic class SimpleInput {\n    private static Scanner scanner = creaScanner();\n\n    private final static String ERROR_FORMAT = \"Warning the input given is not the correct format\";\n    private final static String ERROR_MIN = \"Warning the input is lower than: \";\n    private final static String ERROR_EMPTHY_STRING = \"Warning the input is empty\";\n    private final static String ERROR_STRING_LENGHT_NOT_ONE = \"Warning input one character\";\n    private final static String ERROR_MAX = \"Warning the input is higher than: \";\n    private final static String MESSAGE_POSSIBLE_CHARACTERS = \"Warning the input characters only in this list: \";\n\n    private final static char YES = 'Y';\n    private final static char NO = 'N';\n\n\n    private static Scanner creaScanner() {\n        Scanner create = new Scanner(System.in);\n        create.useDelimiter(System.lineSeparator());\n        return create;\n    }\n\n    /*\n     * @author Mattia Tognela\n     * @param message Let you deliver a message for the user\n     * @return it returns a String form the method scanner.nexline();\n     */\n\n    public static String readSting(String message) {\n        System.out.printf(\"%s -> \", message);\n        return scanner.nextLine();\n    }\n\n    /*\n     * @author Mattia Tognela\n     * @param message Let you deliver a message for the user\n     * @return it returns a not empthy String form the method scanner.nexline().trim();\n     */\n\n    public static String readStringNotEmpthy(String message) {\n        while (true) {\n            String lettura = readSting(message).trim();\n\n            if (!lettura.isEmpty()) return lettura;\n            else System.out.println(ERROR_FORMAT);\n        }\n    }\n\n    /*\n     * @author Mattia Tognela\n     * @param message Let you deliver a message for the user\n     * @return it returns character form the method scanner.nexline().atChar(0);\n     */\n\n    public static char readChar(String message) {\n        while (true) {\n            System.out.printf(\"%s -> \", message);\n\n            String valoreLetto = scanner.nextLine();\n\n            if (valoreLetto.length() == 1) return valoreLetto.charAt(0);\n            else System.out.println(ERROR_STRING_LENGHT_NOT_ONE);\n        }\n    }\n\n    /*\n     * @author Mattia Tognela\n     * @param message Let you deliver a message for the user\n     * @return it returns character form the list of possible characters\n     */\n\n    public static char readCharUpper(String message, String possible) {\n        while (true) {\n            char valoreLetto = Character.toUpperCase(readChar(message));\n\n            if (possible.indexOf(valoreLetto) != -1) return valoreLetto;\n            else System.out.printf(\"%s %s\\n\", MESSAGE_POSSIBLE_CHARACTERS, possible);\n        }\n    }\n\n    /*\n     * @author Mattia Tognela\n     * @param message Let you deliver a message for the user\n     * @param fromSting if true it will convert an int from a String red with the method scanner.nextLine;\n     *        if false it will read an int with the method scanner.nextInt;\n     *\n     * @return an int\n     */\n\n    public static int readInt(String message, boolean fromSting) {\n        while (true) {\n            System.out.printf(\"%s -> \", message);\n            try {\n                if (fromSting) return Integer.parseInt(scanner.nextLine());\n                return scanner.nextInt();\n            } catch (InputMismatchException e) {\n                System.out.println(ERROR_FORMAT);\n                scanner.next();\n            }\n        }\n    }\n\n    /*\n     * @author Mattia Tognela\n     * @param message Let you deliver a message for the user\n     * @param fromSting if true it will convert an int from a String red with the method scanner.nextLine;\n     *        if false it will read an int with the method scanner.nextInt;\n     *\n     * @return an int more or equal than 1\n     */\n\n    public static int readIntPos(String message, boolean fromSting) {\n        return readIntMin(message, 1, fromSting);\n    }\n\n    /*\n     * @author Mattia Tognela\n     * @param message Let you deliver a message for the user\n     * @param fromSting if true it will convert an int from a String red with the method scanner.nextLine;\n     *        if false it will read an int with the method scanner.nextInt;\n     *\n     * @return an int more or equal than 0\n     */\n\n    public static int readIntNotNeg(String message, boolean fromSting) {\n        return readIntMin(message, 0, fromSting);\n    }\n\n    /*\n     * @author Mattia Tognela\n     * @param message Let you deliver a message for the user\n     * @param min let you define a min val under then the input is not acceptable\n     * @param fromSting if true it will convert an int from a String red with the method scanner.nextLine;\n     *        if false it will read an int with the method scanner.nextInt;\n     *\n     * @return an int more or equal than min\n     */\n\n    public static int readIntMin(String message, int min, boolean fromSting) {\n        while (true) {\n            int valoreLetto = readInt(message, fromSting);\n\n            if (valoreLetto >= min) return valoreLetto;\n            else System.out.printf(\"%s %+d\\n\", ERROR_MIN, min);\n        }\n    }\n\n    /*\n     * @author Mattia Tognela\n     * @param message Let you deliver a message for the user\n     * @param min let you define a min val under then the input is not acceptable\n     * @param max let you define a min val over then the input is not acceptable\n     * @param fromSting if true it will convert an int from a String red with the method scanner.nextLine;\n     *        if false it will read an int with the method scanner.nextInt;\n     *\n     * @return an int between min and max\n     */\n\n\n    public static int readIntMinMax(String message, int min, int max, boolean fromSting) {\n        while (true) {\n            int valoreLetto = readInt(message, fromSting);\n\n            if (valoreLetto >= min && valoreLetto <= max) return valoreLetto;\n            else if (valoreLetto < min) System.out.printf(\"%s %+d\\n\", ERROR_MIN, min);\n            else System.out.printf(\"%s %+d\\n\", ERROR_MAX, max);\n        }\n    }\n\n    /*\n     * @author Mattia Tognela\n     * @param message Let you deliver a message for the user\n     * @param fromSting if true it will convert a double from a String red with the method scanner.nextLine;\n     *        if false it will read an int with the method scanner.nextDouble;\n     *\n     * @return a double\n     */\n\n    public static double readDuble(String message, boolean fromString) {\n        while (true) {\n            System.out.printf(\"%s -> \", message);\n            try {\n                if (fromString) return Double.parseDouble(scanner.nextLine());\n                else return scanner.nextDouble();\n            } catch (InputMismatchException e) {\n                System.out.println(ERROR_MIN);\n                scanner.next();\n            }\n        }\n    }\n\n    /*\n     * @author Mattia Tognela\n     * @param message Let you deliver a message for the user\n     * @param fromSting if true it will convert an int from a String red with the method scanner.nextLine;\n     *        if false it will read an int with the method scanner.nextInt;\n     *\n     * @return a double more or equal than 1\n     */\n\n    public static double readDoublePos(String message, boolean fromSting) {\n        return readDoubleMin(message, 1, fromSting);\n    }\n\n    /*\n     * @author Mattia Tognela\n     * @param message Let you deliver a message for the user\n     * @param fromSting if true it will convert an int from a String red with the method scanner.nextLine;\n     *        if false it will read an int with the method scanner.nextInt;\n     *\n     * @return a double more or equal than 0\n     */\n\n    public static double readDubleNotNeg(String message, boolean fromSting) {\n        return readDoubleMin(message, 0, fromSting);\n    }\n\n    /*\n     * @author Mattia Tognela\n     * @param message Let you deliver a message for the user\n     * @param min let you define a min val under then the input is not acceptable\n     * @param fromSting if true it will convert an int from a String red with the method scanner.nextLine;\n     *        if false it will read an int with the method scanner.nextInt;\n     *\n     * @return a double over min\n     */\n\n    public static double readDoubleMin(String message, double minimo, boolean fromSting) {\n        while (true) {\n            double valoreLetto = readDuble(message, fromSting);\n\n            if (valoreLetto >= minimo) return valoreLetto;\n            else System.out.printf(\"%s %+.2f\\n\", ERROR_MIN, minimo);\n        }\n    }\n\n    /*\n     * @author Mattia Tognela\n     * @param message Let you deliver a message for the user\n     *\n     * @return a boolean\n     */\n\n    public static boolean yesOrNo(String message) {\n        return readCharUpper(String.format(\"%s (%s/%s) -> \", message, YES, NO), String.format(\"%c%c\", YES, NO)) == YES;\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/kibo/pgar/lib/SimpleInput.java b/src/main/java/com/kibo/pgar/lib/SimpleInput.java
--- a/src/main/java/com/kibo/pgar/lib/SimpleInput.java	(revision 8fa5f2da86cba0523e42174b0218f482e97c117b)
+++ b/src/main/java/com/kibo/pgar/lib/SimpleInput.java	(date 1741681044437)
@@ -44,7 +44,7 @@
     /*
      * @author Mattia Tognela
      * @param message Let you deliver a message for the user
-     * @return it returns a not empthy String form the method scanner.nexline().trim();
+     * @return it returns a not empty String form the method scanner.nexline().trim();
      */
 
     public static String readStringNotEmpthy(String message) {
