import java.io.IOException
import java.io.InputStreamReader
import java.io.BufferedReader
/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
    `java-library`
    `maven-publish`
    id("com.gradleup.shadow") version "9.0.0-beta10"
    kotlin("jvm")
}

repositories {
    mavenLocal()
    mavenCentral()
    gradlePluginPortal()
}

dependencies {
    /*
     */

    api("com.google.guava:guava:33.4.0-jre") // under APACHE 2.0 licence
    api("org.slf4j:slf4j-api:2.0.17") // under MIT licence
    testImplementation("org.junit.jupiter:junit-jupiter:5.12.1")
    testRuntimeOnly("org.junit.platform:junit-platform-launcher:1.12.1")
    implementation(kotlin("stdlib-jdk8"))
}

group = "com.kibo.pgar.lib"
version = "1.0.0"
description = "kibo-pgar-lib"
java {

}

publishing {
publications.create<MavenPublication>("maven") {
    from(components["java"])
}

publications.create<MavenPublication>("shadow") {
    from(components["shadow"])
}
}

tasks.withType<JavaCompile>() {
options.encoding = "UTF-8"
}

tasks.withType<Javadoc>() {
options.encoding = "UTF-8"
}

tasks.test {
useJUnitPlatform()
}

val testJar by tasks.registering(Jar::class) {
    manifest {
        attributes["Description"] = "Don't know what I'm doing" // help me out to use manifest jar
    }
}

tasks.shadowJar {
archiveClassifier = ""

manifest.inheritFrom(testJar.get().manifest)

    dependencies {
        exclude(dependency("org.junit.jupiter:junit-jupiter:5.12.1"))
        exclude(dependency("org.junit.platform:junit-platform-launcher:1.12.1"))

        include(dependency("org.slf4j:slf4j-api:2.0.17"))
        include(dependency("com.google.guava:guava:33.4.0-jre"))

        configurations = provider { listOf(project.configurations.runtimeClasspath.get()) }
    }

    minimize {
        exclude(dependency("org.slf4j:slf4j-api:2.0.17"))
        exclude(dependency("com.google.guava:guava:33.4.0-jre"))
    }
}

fun runCommand(command: String) {
    try {
        // Split the command by space to pass it as a list of arguments
        val processBuilder = ProcessBuilder(*command.split(" ").toTypedArray())

        // Start the process
        val process = processBuilder.start()

        // Read the output from the command
        val reader = BufferedReader(InputStreamReader(process.inputStream))
        val output = StringBuilder()
        var line: String?

        while (reader.readLine().also { line = it } != null) {
            output.append(line).append("\n")
        }

        // Read the error stream if any
        val errorReader = BufferedReader(InputStreamReader(process.errorStream))
        val errorOutput = StringBuilder()
        while (errorReader.readLine().also { line = it } != null) {
            errorOutput.append(line).append("\n")
        }

        // Wait for the process to finish
        val exitCode = process.waitFor()

        // Print the output and errors
        if (output.isNotEmpty()) {
            println("Command Output:\n$output")
        }

        if (errorOutput.isNotEmpty()) {
            println("Command Errors:\n$errorOutput")
        }

        println("Exit Code: $exitCode")

    } catch (e: IOException) {
        println("An error occurred: ${e.message}")
    } catch (e: InterruptedException) {
        println("The process was interrupted: ${e.message}")
    }
}
kotlin {
    jvmToolchain(21)
}